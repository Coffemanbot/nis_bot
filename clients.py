import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from database import SessionLocal, User
from config1 import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class RegStates(StatesGroup):
    fio = State()
    gender = State()
    age = State()
    phone = State()

def user_exists(user_id: int):
    db = SessionLocal()
    exists = db.query(User).filter(User.user_id == user_id).first()
    db.close()
    return exists

def add_user(user_id: int, surname: str, name: str, patronymic: str, gender: str, age: int, phone: str):
    db = SessionLocal()
    user = User(
        user_id=user_id,
        surname=surname,
        name=name,
        patronymic=patronymic,
        gender=gender,
        age=age,
        phone=phone
    )
    db.add(user)
    db.commit()
    db.close()

@dp.message(CommandStart())
async def start_reg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_exists(user_id):
        user = user_exists(user_id)
        fio_full = f"{user.name}"
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {fio_full}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    await state.set_state(RegStates.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ:")

@dp.message(RegStates.fio)
async def get_fio(message: types.Message, state: FSMContext):
    fio_parts = message.text.strip().split()
    if len(fio_parts) != 3:
        return await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.")
    surname, name, patronymic = fio_parts
    await state.update_data(surname=surname, name=name, patronymic=patronymic)
    gender_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(RegStates.gender)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard)

@dp.message(RegStates.gender)
async def get_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip()
    if gender.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π.")
    await state.update_data(gender=gender)
    await state.set_state(RegStates.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())

@dp.message(RegStates.age)
async def get_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
    await state.update_data(age=int(message.text))
    await state.set_state(RegStates.phone)
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79998887766):",
        reply_markup=contact_keyboard
    )

@dp.message(RegStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
    await state.update_data(phone=phone)
    data = await state.get_data()
    user_id = message.from_user.id
    add_user(user_id, data['surname'], data['name'], data['patronymic'], data['gender'], data['age'], data['phone'])
    full_name = f"{data['surname']} {data['name']}"
    await message.answer(f"‚úÖ {full_name}, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())