import asyncio
import asyncpg
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, PreCheckoutQuery, ContentType, SuccessfulPayment, InlineKeyboardButton, InlineKeyboardMarkup
from config import DB_CONFIG, PAYMENT_PROVIDER_TOKEN
from db_queries import get_menu_item_by_id, get_wine_item_by_id
import re

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

router = Router()

db_pool = None


def set_db_pool(pool):
    global db_pool
    db_pool = pool

async def add_item_to_cart(user_id: int, restaurant_id: int, item_id: int, is_wine: bool = False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —É–∂–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ç–æ –∏—Ö restaurant_id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–≤—ã–º
    async with db_pool.acquire() as conn:
        existing_restaurant = await conn.fetchrow(
            "SELECT restaurant_id FROM cart WHERE user_id=$1 LIMIT 1", user_id
        )
        if existing_restaurant and existing_restaurant["restaurant_id"] != restaurant_id:
            raise Exception("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ü•≤")

    if is_wine:
        item = await get_wine_item_by_id(db_pool, item_id)
    else:
        item = await get_menu_item_by_id(db_pool, item_id)

    if not item:
        logger.error(f"–¢–æ–≤–∞—Ä —Å id {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    item_name = item["name"]
    price_str = item.get("price", "0")
    price_digits = re.sub(r"[^\d]", "", price_str)
    price = int(price_digits) * 100 if price_digits else 0

    async with db_pool.acquire() as conn:
        existing_item = await conn.fetchrow(
            "SELECT count FROM cart WHERE user_id=$1 AND item_id=$2 AND restaurant_id=$3 AND is_wine=$4",
            user_id, item_id, restaurant_id, bool(int(is_wine))
        )
        if existing_item:
            await conn.execute(
                "UPDATE cart SET count = count + 1 WHERE user_id=$1 AND item_id=$2 AND restaurant_id=$3 AND is_wine=$4",
                user_id, item_id, restaurant_id, bool(int(is_wine))
            )
            logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {item_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await conn.execute(
                "INSERT INTO cart (user_id, item_id, restaurant_id, item_name, price, is_wine, count) VALUES ($1, $2, $3, $4, $5, $6, 1)",
                user_id, item_id, restaurant_id, item_name, price, bool(int(is_wine))
            )
            logger.info(f"–¢–æ–≤–∞—Ä {item_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart_callback(callback: types.CallbackQuery):
    try:
        _, restaurant_id_str, item_id_str, is_wine_str = callback.data.split(":", 3)
        restaurant_id = int(restaurant_id_str)
        item_id = int(item_id_str)
        is_wine = is_wine_str == "True"
        user_id = callback.from_user.id

        await add_item_to_cart(user_id, restaurant_id, item_id, is_wine)
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ add_to_cart_callback: {e}")
        await callback.message.answer(str(e))
        await callback.answer()

async def clear_cart(user_id: int):
    async with db_pool.acquire() as conn:
        result = await conn.execute("DELETE FROM cart WHERE user_id=$1", user_id)
        logger.info(f"clear_cart: –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è user_id={user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

@router.callback_query(lambda c: c.data == "view_cart")
async def view_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    items = await get_cart_items(user_id)
    if not items:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üòä")
        await callback.answer()
        return

    total = sum(i['price'] * i['count'] for i in items)
    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    for item in items:
        item_total = item['price'] * item['count']
        cart_text += (
            f"{item['item_name']}\n"
            f"   üì¶ –ö–æ–ª-–≤–æ: {item['count']} —à—Ç.  |  üíµ –°—É–º–º–∞: {item_total / 100:.2f} —Ä—É–±.\n"
        )
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total / 100:.2f} —Ä—É–±."

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="remove_from_cart_prompt")]
    ])
    await callback.message.answer(cart_text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    await clear_cart(callback.from_user.id)
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()


@router.callback_query(F.data == "checkout")
async def checkout_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    items = await get_cart_items(user_id)
    if not items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    total = sum(i['price'] * i['count'] for i in items)
    prices = [LabeledPrice(label="–í–∞—à –∑–∞–∫–∞–∑", amount=total)]

    await callback.bot.send_invoice(
        chat_id=user_id,
        title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
        payload="test-invoice-payload",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="cart-payment"
    )
    await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout(query: PreCheckoutQuery):
    await query.answer(ok=True)
    logger.info(f"Pre checkout query –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {query.id}")


async def get_cart_items(user_id: int):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT item_name, price, count FROM cart WHERE user_id=$1", user_id)
        return [{"item_name": r["item_name"], "price": r["price"], "count": r["count"]} for r in rows]


async def save_order_from_cart(user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–≤–∫–ª—é—á–∞—è id, is_wine –∏ restaurant_id)
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT id, item_name, price, count, is_wine, restaurant_id FROM cart WHERE user_id=$1",
            user_id
        )
    items = [dict(r) for r in rows]
    if not items:
        return None

    order_id_candidate = min(item['id'] for item in items)

    restaurant_id = items[0]['restaurant_id']

    menu_items = []
    wine_items = []
    total_count = 0
    for item in items:
        total_count += item['count']
        if item['is_wine']:
            wine_items.append(f"{item['item_name']} (x{item['count']})")
        else:
            menu_items.append(f"{item['item_name']} (x{item['count']})")

    menu_text = ", ".join(menu_items) if menu_items else ""
    wine_text = ", ".join(wine_items) if wine_items else ""

    async with db_pool.acquire() as conn:
        await conn.execute("""
                INSERT INTO orders (order_id, user_id, restaurant_id, menu_items, wine_items, count)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, order_id_candidate, user_id, restaurant_id, menu_text, wine_text, total_count)

    await clear_cart(user_id)

    return order_id_candidate


async def get_order_history(user_id: int) -> list:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
                SELECT order_id, payment_date, menu_items, wine_items, count
                FROM orders
                WHERE user_id = $1
                ORDER BY payment_date DESC;
            """, user_id)
    return rows

class DeleteStates(StatesGroup):
    awaiting_quantity = State()

async def remove_item_from_cart(user_id: int, restaurant_id: int, item_id: int, remove_count: int, is_wine: bool = False):
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT count FROM cart WHERE user_id=$1 AND item_id=$2 AND restaurant_id=$3 AND is_wine=$4",
            user_id, item_id, restaurant_id, bool(int(is_wine))
        )
        if not row:
            logger.error(f"–¢–æ–≤–∞—Ä —Å id {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        current_count = row["count"]
        if remove_count >= current_count:
            await conn.execute(
                "DELETE FROM cart WHERE user_id=$1 AND item_id=$2 AND restaurant_id=$3 AND is_wine=$4",
                user_id, item_id, restaurant_id, bool(int(is_wine))
            )
            logger.info(f"–ü–æ–∑–∏—Ü–∏—è {item_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await conn.execute(
                "UPDATE cart SET count = count - $1 WHERE user_id=$2 AND item_id=$3 AND restaurant_id=$4 AND is_wine=$5",
                remove_count, user_id, item_id, restaurant_id, bool(int(is_wine))
            )
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {item_id} —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ {remove_count} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

@router.callback_query(F.data == "remove_from_cart_prompt")
async def remove_from_cart_prompt(callback: types.CallbackQuery):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT id, item_id, item_name, count, restaurant_id, is_wine FROM cart WHERE user_id=$1",
            callback.from_user.id
        )
    items = [dict(r) for r in rows]
    if not items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    buttons = []
    for item in items:
        cb_data = f"choose_delete_item:{item['item_id']}:{item['restaurant_id']}:{item['is_wine']}"
        button_text = f"{item['item_name']}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=cb_data)])
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="view_cart")])
    inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üóëÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=inline_kb)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("choose_delete_item:"))
async def choose_delete_item_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, item_id_str, restaurant_id_str, is_wine_str = callback.data.split(":", 3)
        item_id = int(item_id_str)
        restaurant_id = int(restaurant_id_str)
        is_wine = is_wine_str == "True"
        await state.update_data(item_id=item_id, restaurant_id=restaurant_id, is_wine=is_wine)
        await callback.message.answer("üî¢–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(DeleteStates.awaiting_quantity)
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)

@router.message(DeleteStates.awaiting_quantity)
async def process_deletion_quantity(message: types.Message, state: FSMContext):
    try:
        remove_count = int(message.text.strip())
        if remove_count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        data = await state.get_data()
        item_id = data.get("item_id")
        restaurant_id = data.get("restaurant_id")
        is_wine = data.get("is_wine")
        await remove_item_from_cart(message.from_user.id, restaurant_id, item_id, remove_count, is_wine)
        await message.answer("‚úÖ–ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æüòä")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
